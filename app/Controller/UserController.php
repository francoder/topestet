<?php

class UserController extends AppController
{
    public $layout = 'index';
    public $allow = [
        'login',
        'registration',
        'auth_social',
        'auth_redirect',
        'activate',
        'page',
        'validate',
        'remind',
    ];
    public $helpers = ['Form', 'Display'];
    public $components = ['Session'];
    public $uses = ['User', 'Service', 'SpecialistService', 'Question'];
    public $social_auth = [
        'vk' => [
            'app_id' => '7005930',
            'client_secret' => 'Zmfwq3hrf2lIFP3J6DFh',
        ],
        'fb' => [
            'app_id' => '460963873922072',
            'client_secret' => '9a617c608cef8f660de25c9f86ad78e2',
        ],
    ];

    public function beforeFilter()
    {

        return parent::beforeFilter(); // TODO: Change the autogenerated stub

    }

    function login()
    {
        if ($this->request->is('post')) {

            $this->autoRender = false;

            //$this->request->data['User']['password'] = Security::hash($this->request->data['User']['password'],'sha1',true);
            $this->Auth->logout();

            if ($this->Auth->login()) {

                if (isset($this->request->data['User']['redirect'])) {
                    $redirect = $this->request->data['User']['redirect'];
                } else if (isset($_GET['redirect'])) {
                    $redirect = $_GET['redirect'];
                } else {
                    $redirect = $this->Auth->redirect();
                }
                if (isset($this->request->data['User']['remember']) && $this->request->data['User']['remember'] == 1) {
                    $this->Cookie->write('remember_id', $this->Auth->user('id'));
                    $this->Cookie->write('remember_check',
                        md5($this->Auth->user('id') . $this->Auth->user('mail') . $_SERVER['SERVER_NAME']));
                }
                if (isset($this->request->data['User']['remember']) && $this->request->data['User']['remember'] == 1) {
                    $this->Cookie->write('remember', $this->request->data['User']);
                }

                return json_encode(['error' => 'false', 'message' => 'Успешно!', 'redirect' => $this->referer()]);
                //return $this->redirect($redirect);
            } else {
                //$this->Session->flash(__('Неверное имя пользователя или пароль'), 'default', array(), 'auth');

                return json_encode(['error' => 'true', 'message' => $this->Auth->loginError]);
            }
        }
        //pr($this->data);
        /** @var CakeRequest $params */
        $params = $this->params;
        if ($this->Auth->user()) {
            if ($params->query('redirect') !== null) {
                echo $this->redirect('/' . $params->query('redirect'));
            } else {
                echo $this->redirect('/forum/');
            }
        }
//    echo $this->redirect($this->referer());
    }

    function logout()
    {
        $this->Auth->logout();
        $this->Cookie->delete('remember_id');
        $this->Cookie->delete('remember_check');
        $this->redirect($this->referer());
    }

    /**
     * @return false|string
     */
    function registration()
    {
        if ($this->request->is('post')) {
            App::uses('CakeTime', 'Utility');
            try {
                $this->autoRender = false;
                $data = $this->data;
                $data['User']['active'] = 0;
                $data['User']['is_specialist'] = 0;
                $data['User']['is_top_set'] = 0;
                $data['User']['social_id'] = '';
                $data['User']['rate'] = 0;
                $data['User']['profession'] = '';
                $data['User']['phone'] = '';
                $data['User']['address'] = '';
                $data['User']['coor'] = '';
                $data['User']['site'] = '';
                $data['User']['social_page'] = '';
                $data['User']['description'] = '';
                $data['User']['specialist_request'] = '';
                $data['User']['sex'] = 0;
                $data['User']['was'] = CakeTime::toServer(date('Y-m-d H:i:s'));
                $data['User']['specialist_request'] = '';

                $data['User']['password'] = Security::hash($data['User']['password'], null, true);
                $data['User']['password_repeat'] = Security::hash($data['User']['password_repeat'], null, true);

                $existsUser = $this->User->findByMail($data['User']['mail']);

                if ($existsUser) {
                    throw new Exception('Такой пользователь уже существует');
                }

                if ($this->User->save($data, false,
                    [
                        'mail',
                        'password',
                        'name',
                        'active',
                        'avatar',
                        'is_specialist',
                        'is_top_set',
                        'social_id',
                        'rate',
                        'profession',
                        'phone',
                        'address',
                        'coor',
                        'site',
                        'social_page',
                        'description',
                        'specialist_request',
                        'sex',
                        'was',
                    ]
                )) {
                    App::uses('CakeEmail', 'Network/Email');
                    $email = new CakeEmail(['log' => true]);
                    $email->from(['no-reply@topestet.ru' => 'TopEstet']);
                    $email->to($data['User']['mail']);
                    $email->subject("Регистрация на сайте {$_SERVER['SERVER_NAME']}");
                    $email->emailFormat('html');
                    $email->viewVars(['user' => $this->data]);
                    $email->template('registration');
                    $email->send();
                    $this->set('done', true);

                    return json_encode([
                        'error' => 'false',
                        'message' => "<span style='color: green'>Вы успешно зарегистрировались. Вам было отправлено письмо на почту.</span>",
                        'redirect' => $this->referer(),
                    ]);
                }
            } catch (Exception $e) {
                //Debugger::dump($e->getMessage());
                return json_encode([
                    'error' => 'true', 'message' => "<span style='color: red'>" . $e->getMessage() . '</span>',
                ]);
            }
        }
    }

    function activate($mail, $code)
    {
        $this->layout = 'fullWidthInner';
        if (empty($mail)) {
            return $this->error_404();
        }
        $user = $this->User->find('first', ['conditions' => ['mail' => $mail]]);
        if (empty($user)) {
            return $this->error_404();
        } else if ($code == md5($_SERVER['SERVER_NAME'] . $user['User']['mail'])) {
            $this->User->id = $user['User']['id'];
            $this->User->saveField('active', 1);
            $this->request->data['User'] = $user['User'];
            $this->Auth->login($this->request->data['User']);
            $this->set('done', true);
        } else {
            $this->set('done', false);
        }
    }

    function delete_image()
    {
        $this->User->removeImages('avatar', $this->user['id']);
        $this->Session->setFlash(__('Аватар удален'), 'user_message');
        $this->redirect('/user/profile/');
    }

    function authblock()
    {
        if ($this->request->is('ajax')) {
            $this->layout = false;
            Configure::write('debug', 0);
        } else {
            return $this->redirect('/');
        }
    }

    function profile()
    {
        if ($this->data) {
            $data = $this->data;
            //$data['User']['birthday'] = $data['User']['birthday']['year']."-".$data['User']['birthday']['month']."-".$data['User']['birthday']['day'];
            //pr($data);
            $whitelist = ['name', 'password', 'mail', 'sex', 'birthday'];
            if ($this->user['is_specialist']) {
                $whitelist = array_merge($whitelist, ['profession', 'phone', 'address', 'site', 'description']);
            }
            //пароль
            $data['User']['id'] = $this->user['id'];
            if (empty($data['User']['password'])) {
                unset($data['User']['password']);
                unset($this->User->validate['password']);
            } else {
                $data['User']['password'] = Security::hash($data['User']['password']);
                $data['User']['password_repeat'] = Security::hash($data['User']['password_repeat']);
            }
            $data['User']['selfsave'] = 1;
            if ($this->User->save($data)) {
                if (!empty($this->data['SpecialistService']['service'])) {
                    foreach ($this->data['SpecialistService']['service'] as $service_id => $result) {
                        if ($result) {
                            if ($this->SpecialistService->find('count',
                                    [
                                        'conditions' => [
                                            'service_id' => $service_id, 'user_id' => $this->user['id'],
                                        ],
                                    ]) == 0) {
                                $this->SpecialistService->id = null;
                                $this->SpecialistService->save([
                                    'SpecialistService' => [
                                        'service_id' => $service_id,
                                        'user_id' => $this->user['id'],
                                    ],
                                ]);
                            }
                        }
                    }
                }
                if (!empty($this->data['User']['specialist_request'])) {
                    App::uses('CakeEmail', 'Network/Email');
                    $email = new CakeEmail();
                    $email->from('no-reply@' . str_replace('www.', '', $_SERVER['SERVER_NAME']));
                    $email->to($this->configs['mainmail']);
                    $email->subject("Заявка в специалисты на сайте {$_SERVER['SERVER_NAME']}");
                    $email->emailFormat('html');
                    $email->viewVars(['user' => $this->data]);
                    $email->viewVars(['user_id' => $this->User->id]);
                    $email->template('specialist_request');
                    $email->send();
                }
                $this->set('done', true);
            }
        } else {
            $this->data = $this->User->find('first',
                ['conditions' => ['id' => $this->user['id']], 'contain' => ['Service']]);
        }

        $this->set('services', $this->Service->getListWithSpec());
        $this->set('child_accounts', $this->User->find('list',
            ['fields' => 'id, name', 'conditions' => ['parent_id' => $this->user['id']],]));
    }

    function page($user_id)
    {
        $this->layout = 'inner';
        $user = $this->User->find('first', [
                'conditions' => ['id' => $user_id],
                'contain' => [
                    'Review' => [
                        'User',
                        'Region',
                        'limit' => 10,
                        'order' => 'Review.created DESC',
                    ],
                    'Comment' => [
                        //"limit" => 10,
                        'conditions' => [
                            'parent_id' => null,
                        ],
                        'order' => 'Comment.created DESC',
                    ],
                ],
            ]
        );
        if (empty($user)) {
            return $this->error_404();
        }
        if ($user['User']['is_specialist']) {
            $this->redirect("/specialist/profile/$user_id/");
        }
        $this->page_title = 'Профиль пользователя ' . $user['User']['name'];
        $this->set('user', $user);
        $this->set('questions',
            $this->Question->find('all', ['conditions' => ['user_id' => $user_id], 'order' => 'created DESC']));
    }

    function auth_social($type)
    {
        $redirect_uri = urlencode('http://' . $_SERVER['SERVER_NAME'] . "/user/auth_redirect/$type/?red=" . urlencode($this->referer()));

        if ($type == 'vk') {
            return $this->redirect("http://oauth.vkontakte.ru/authorize?client_id={$this->social_auth[$type]['app_id']}&scope=&redirect_uri=$redirect_uri&response_type=code"/*&display=popup"*/);
        }
        if ($type == 'fb') {
            $redirect_uri = urlencode('http://' . $_SERVER['SERVER_NAME'] . "/user/auth_redirect/$type/");

            return $this->redirect("https://www.facebook.com/dialog/oauth?client_id={$this->social_auth[$type]['app_id']}&redirect_uri=$redirect_uri&response_type=code"/*&display=popup*/ . '&scope=email&f=d');
        }
    }

    function auth_redirect($type)
    {

        //$this->layout = "mini";

        if ($type == 'vk') {
            if (!isset($_GET['error']) && isset($_GET['code'])) {
                $code = $_GET['code'];
                //получаем access_token
                //$redirect_uri

                $redirect_uri = urlencode('http://' . $_SERVER['SERVER_NAME'] . "/user/auth_redirect/$type/?red={$_GET['red']}");

                $access_token = file("https://oauth.vkontakte.ru/access_token?client_id={$this->social_auth[$type]['app_id']}&client_secret={$this->social_auth[$type]['client_secret']}&code=$code&redirect_uri=$redirect_uri");

                if (!$access_token) {
                    //die('error 1');

                    $this->set('error', true);

                    return true;
                }

                $access_token = json_decode($access_token[0], true);

                Debugger::dump($access_token);

                if (!isset($access_token['access_token']) && isset($access_token['error'])) {
                    /*
                    echo $this->referer() . "<br>";
                    echo "http://".$_SERVER['SERVER_NAME']."/user/auth_redirect/$type/?red=".urlencode($this->referer()) . "<br>";
                    echo urlencode("http://".$_SERVER['SERVER_NAME']."/user/auth_redirect/$type/?red=".urlencode($this->referer())) . "<br>";

                    echo "<pre>"; var_dump($access_token); echo "</pre>";

                    die('error 2');
                    */

                    $this->set('error', true);

                    return true;
                }
                $user_id = $access_token['user_id'];
                $access_token = $access_token['access_token'];

                //получаем профиль авторизовавшегося пользователя
                $profile = file("https://api.vkontakte.ru/method/getProfiles?uid=$user_id&access_token=$access_token&fields=uid,first_name,last_name,nickname,city,sex,bdate,country,photo_big");
                if (!$profile) {
                    //die('error 3');

                    $this->set('error', true);

                    return true;
                }
                $profile = json_decode($profile[0], true);
                $profile = $profile['response'][0];
                if (empty($profile)) {
                    //die('error 4');

                    $this->set('error', true);

                    return true;
                }
                //проверяем есть ли пользователь в БД
                $user = $this->User->findBySocialId("$type{$profile['uid']}");
                if (empty($user)) {
                    $data['name'] = $profile['first_name'] . ' ' . $profile['last_name'];
                    $data['social_id'] = $type . $profile['uid'];
                    $data['password'] = $this->Auth->password($this->social_auth[$type]['client_secret'] . $profile['uid']);
                    $data['active'] = 1;
                    $data['sex'] = $profile['sex'];
                    //получаем город пользователя
                    if (isset($profile['city']) && !empty($profile['city'])) {
                        $params['app_id'] = $this->social_auth[$type]['app_id'];
                        $params['cids'] = $profile['city'];
                        foreach ($params as $key => $value) {
                            $params_prep[] = "$key=$value";
                        }
                        $sig = implode('', $params_prep) . $this->social_auth[$type]['client_secret'];
                        $params = implode('&', $params_prep);
                        $city = file("https://api.vkontakte.ru/method/getCities?$params&access_token=$access_token");
                        $city = json_decode($city[0], true);
                        $city = $city['response'][0]['name'];
                        $data['city'] = $city;
                    }
                    //получаем страну пользователя
                    if (isset($profile['country']) && !empty($profile['country'])) {
                        $country = file($u = "https://api.vkontakte.ru/method/places.getCountryById?cids={$profile['country']}&access_token=$access_token&lang=ru");
                        $country = json_decode($country[0], true);
                        $country = $country['response'][0]['name'];
                        $data['country'] = $country;
                    }
                    if (!empty($profile['bdate']) && strlen($profile['bdate']) > 6) {
                        $data['birthday'] = substr($profile['bdate'], 6, 4) . '-' . substr($profile['bdate'], 3,
                                2) . '-' . substr($profile['bdate'], 0, 2);
                    }
                    if (strpos($profile['photo_big'], 'camera') === false) {
                        $data['avatar']['tmp_name'] = $profile['photo_big'];
                        $data['avatar']['name'] = basename($profile['photo_big']);
                    }
                    $user['User'] = $data;
                    //$user_to_remember = array("social_id" => $type.$profile['uid'], "password" => ($this->social_auth[$type]['client_secret'].$profile['uid']));
                } else {
                    $user_to_auth = [
                        'User' => [
                            'id' => $user['User']['id'],
                            'social_id' => $user['User']['social_id'],
                            'password' => $user['User']['password'],
                        ],
                    ];
                    //$user_to_remember = array("social_id" => $user['User']['social_id'], "password" => ($this->social_auth[$type]['client_secret'].$profile['uid']));
                }
            } else {
                //die('error 5');

                return $this->set('error', true);
            }
        }

        //FACEBOOK
        if ($type == 'fb') {
            if (!isset($_GET['error']) && isset($_GET['code'])) {
                $code = $_GET['code'];
                //получаем access_token
                $access_token = file($url = "https://graph.facebook.com/oauth/access_token?client_id={$this->social_auth[$type]['app_id']}&client_secret={$this->social_auth[$type]['client_secret']}&code=$code&redirect_uri=http://{$_SERVER['SERVER_NAME']}/user/auth_redirect/fb/");
                echo $url;
                if (!$access_token) {
                    $this->set('error', true);

                    return true;
                }
                $access_token = $access_token[0];
                parse_str($access_token, $result);
                $access_token = $result['access_token'];

                //получаем профиль авторизовавшегося пользователя
                $profile = file("https://graph.facebook.com/me?access_token=$access_token");
                if (!$profile) {
                    $this->set('error', true);

                    return true;
                }
                $profile = json_decode($profile[0], true);

                //проверяем есть ли пользователь в БД
                $user = $this->User->findBySocialId("$type{$profile['id']}");
                if (empty($user)) {
                    $data['name'] = $profile['first_name'] . ' ' . $profile['last_name'];
                    $data['social_id'] = $type . $profile['id'];
                    $data['mail'] = $profile['email'];
                    $data['password'] = $this->Auth->password($this->social_auth[$type]['client_secret'] . $profile['id']);
                    $data['active'] = 1;
                    $data['social_page'] = $profile['link'];
                    //получаем город пользователя
                    if (isset($profile['location']['name'])) {
                        $location = explode(', ', $profile['location']['name']);
                        $data['city'] = $location[0];
                        $data['country'] = $location[1];
                    }

                    if (isset($profile['gender'])) {
                        if ($profile['gender'] == 'male') {
                            $data['sex'] = 1;
                        } else if ($profile['gender'] == 'female') {
                            $data['sex'] = 2;
                        }
                    }

                    $data['avatar']['tmp_name'] = "https://graph.facebook.com/me/picture?access_token=$access_token&type=large";
                    $data['avatar']['name'] = 'image.jpg';

                    $user['User'] = $data;
                } else {
                    $user_to_auth = [
                        'User' => [
                            'id' => $user['User']['id'],
                            'social_id' => $user['User']['social_id'],
                            'password' => $user['User']['password'],
                        ],
                    ];
                }
            } else {
                return $this->set('error', true);
            }
        }

        if (isset($user) && !empty($user)) {
            //$user['Language'][$this->languages[1]] = array();
            //$this->User->locale = $this->languages[0];
            $this->User->save($user, false);
            $user['User']['id'] = $this->User->id;
            $user_to_auth = $user;
        }

        $this->Auth->authenticate['Form']['fields'] = ['username' => 'social_id', 'password' => 'password'];

        //pr($user);
        $this->request->data['User'] = $user_to_auth['User'];
        if (!$this->Auth->login($this->request->data['User'])) {
            //echo 123;
        }
        if (isset($_GET['red'])) {
            return $this->redirect($_GET['red']);
        } else {
            return $this->redirect('/');
        }
    }

    function simulate($user_id)
    {
        $user = $this->User->find('first',
            ['conditions' => ['parent_id' => $this->user['id'], 'id' => $user_id]]);
        if (!empty($user)) {
            $this->Session->write('simulate_id', $this->user['id']);
            $this->Session->write('simulate_referer', $this->referer());
            //$this->Auth->logout();
            $this->request->data['User'] = $user['User'];
            $this->Auth->login($this->request->data['User']);

            return $this->redirect('/');
        } else {
            return $this->error_404();
        }
    }

    function quit_simulate()
    {
        if ($user_id = $this->Session->read('simulate_id')) {
            $user = $this->User->find('first', [
                'conditions' => [
                    'id' => $user_id,
                ],
            ]);

            if (!empty($user)) {
                $this->Session->delete('simulate_id');
                //$this->Auth->logout();
                $this->request->data['User'] = $user['User'];
                $this->Auth->login($this->request->data['User']);
                if ($this->Session->read('simulate_referer')) {
                    return $this->redirect($this->Session->read('simulate_referer'));
                } else {
                    return $this->redirect('/admin/');
                }
            } else {
                return $this->error_404();
            }
        } else {
            return $this->error_404();
        }
    }

    function remind()
    {
        if ($this->request->data) {
            $user = $this->User->findByMail($this->request->data['User']['mail']);
            if (!empty($user)) {
                App::uses('CakeEmail', 'Network/Email');
                $new_password = substr(md5(rand(0, 10000)), 0, 8);
                $this->User->id = $user['User']['id'];
                $this->User->saveField('password', $this->Auth->password($new_password));

                $email = new CakeEmail();
                $email->from('no-reply@' . str_replace('www.', '', $_SERVER['SERVER_NAME']));
                $email->to($user['User']['mail']);
                $email->subject("Восстановление пароля ({$_SERVER['SERVER_NAME']})");
                $email->emailFormat('html');
                $email->viewVars(['user' => $user, 'new_password' => $new_password]);
                $email->template('remind_password');
                $email->send();
                $this->set('done', true);
            } else {
                $this->Session->setFlash('Пользователь не найден!');
            }
        }
    }
}
